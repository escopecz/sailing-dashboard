name: Release Validation and PR Creation

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Triggers on semver tags like 0.0.1, 1.2.3, etc.
      - '[0-9]+.[0-9]+.[0-9]+-*'  # Also includes pre-release tags like 1.0.0-beta.1

jobs:
  validate-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to access all branches
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${{ github.ref_name }}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Validating release for version: $VERSION"
    
    - name: Find corresponding branch
      id: branch
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BRANCH_NAME="bump-$VERSION"
        
        # Check if the branch exists
        if git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Found corresponding branch: $BRANCH_NAME"
        else
          echo "‚ùå Error: Could not find branch $BRANCH_NAME for tag $VERSION"
          exit 1
        fi
    
    - name: Checkout release branch
      run: |
        BRANCH_NAME="${{ steps.branch.outputs.branch }}"
        git checkout origin/$BRANCH_NAME
    
    - name: Validate version consistency
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üîç Validating version consistency across all files..."
        
        # Check root package.json
        ROOT_VERSION=$(node -e "console.log(require('./package.json').version)")
        echo "Root package.json version: $ROOT_VERSION"
        
        # Check web package.json
        WEB_VERSION=$(node -e "console.log(require('./web/package.json').version)")
        echo "Web package.json version: $WEB_VERSION"
        
        # Check TypeScript version file
        TS_VERSION=$(grep "const VERSION = " web/src/utils/version.ts | sed "s/.*const VERSION = '\\(.*\\)'.*/\\1/")
        echo "TypeScript version.ts version: $TS_VERSION"
        
        # Check firmware version
        FW_VERSION=$(grep "#define FIRMWARE_VERSION" firmware/src/main.cpp | sed 's/.*"\(.*\)".*/\1/')
        echo "Firmware main.cpp version: $FW_VERSION"
        
        # Validate all versions match the tag
        ERRORS=0
        
        if [ "$ROOT_VERSION" != "$VERSION" ]; then
          echo "‚ùå Root package.json version ($ROOT_VERSION) doesn't match tag ($VERSION)"
          ERRORS=$((ERRORS + 1))
        fi
        
        if [ "$WEB_VERSION" != "$VERSION" ]; then
          echo "‚ùå Web package.json version ($WEB_VERSION) doesn't match tag ($VERSION)"
          ERRORS=$((ERRORS + 1))
        fi
        
        if [ "$TS_VERSION" != "$VERSION" ]; then
          echo "‚ùå TypeScript version ($TS_VERSION) doesn't match tag ($VERSION)"
          ERRORS=$((ERRORS + 1))
        fi
        
        if [ "$FW_VERSION" != "$VERSION" ]; then
          echo "‚ùå Firmware version ($FW_VERSION) doesn't match tag ($VERSION)"
          ERRORS=$((ERRORS + 1))
        fi
        
        if [ $ERRORS -eq 0 ]; then
          echo "‚úÖ All versions are consistent with tag $VERSION"
        else
          echo "‚ùå Found $ERRORS version inconsistencies"
          exit 1
        fi
    
    - name: Install dependencies and build
      run: |
        echo "üì¶ Installing dependencies..."
        cd web && npm install
    
    - name: Build web app
      run: |
        echo "üèóÔ∏è Building web application..."
        cd web && npm run build
    
    - name: Setup Python for PlatformIO
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        echo "‚ö° Installing PlatformIO..."
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware
      run: |
        echo "üîß Building firmware..."
        pio run
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.branch.outputs.branch }}
        title: "Release v${{ steps.version.outputs.version }}"
        body: |
          ## üöÄ Release v${{ steps.version.outputs.version }}
          
          This PR contains the version bump and all necessary changes for releasing version **${{ steps.version.outputs.version }}**.
          
          ### ‚úÖ Validation Results
          - ‚úÖ Version consistency verified across all files
          - ‚úÖ Web application builds successfully  
          - ‚úÖ Firmware builds successfully
          - ‚úÖ All automated checks passed
          
          ### üìã Changes
          - Updated version to `${{ steps.version.outputs.version }}` in:
            - Root `package.json`
            - Web `package.json` 
            - TypeScript `version.ts`
            - Firmware `main.cpp`
          
          ### üè∑Ô∏è Tag Information
          - **Tag**: `${{ steps.version.outputs.version }}`
          - **Commit**: `${{ github.sha }}`
          - **Branch**: `${{ steps.branch.outputs.branch }}`
          
          ### üîÑ Next Steps
          1. Review the changes in this PR
          2. Merge this PR to complete the release
          3. GitHub Actions will automatically:
             - Create a GitHub release with binaries
             - Deploy the web app to GitHub Pages
          
          ---
          *This PR was automatically created by the release workflow.*
        labels: |
          release
          automated
        draft: false
    
    - name: Summary
      run: |
        echo "üéâ Release validation completed successfully!"
        echo "üìã Summary:"
        echo "   ‚úÖ Version ${{ steps.version.outputs.version }} validated"
        echo "   ‚úÖ All builds successful"
        echo "   ‚úÖ Pull Request created"
        echo ""
        echo "üëÄ Please review and merge the Pull Request to complete the release."
